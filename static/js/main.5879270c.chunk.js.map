{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","console","log","_this$state","length","props","add","maxDate","this","react_default","a","createElement","className","type","id","onChange","htmlFor","placeholder","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","change","index_es","icon","faCheckCircle","size","color","delete","faTrash","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","toLowerCase","activeTasks","map","src_components_Task","key","doneTasks","Fragment","style","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","src_components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5879270c.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './AddTask.css';\r\nclass AddTask extends Component {\r\n\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n  state = {\r\n    text: '',\r\n    checked: false,\r\n    date: this.minDate,\r\n  }\r\n\r\n  handleText = (e) => {\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n\r\n  handleCheckbox = (e) => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    })\r\n  }\r\n\r\n  handleDate = (e) => {\r\n    this.setState({\r\n      date: e.target.value,\r\n    })\r\n  }\r\n\r\n  handleClick = () => {\r\n    console.log(\"dodaj\");\r\n\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: '',\r\n          checked: false,\r\n          date: this.minDate\r\n        })\r\n      }\r\n    } else {\r\n      console.log(\"za krótko\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    // console.log(maxDate);\r\n    maxDate = maxDate + \"-12-31\";\r\n\r\n    return (\r\n      <div className=\"form\">\r\n        <form className=\"importantCheckbox\">\r\n          <input type=\"checkbox\" checked={this.state.checked} id=\"important\" onChange={this.handleCheckbox} />\r\n          <label htmlFor=\"important\">Priorytet</label>\r\n        </form>\r\n        <form className=\"addTaskForm\">\r\n          <input type=\"text\" placeholder=\"Dodaj zadanie\" value={this.state.text} onChange={this.handleText} />\r\n          <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n          <input type=\"date\" value={this.state.date} min={this.minDate} max={maxDate} onChange={this.handleDate} />\r\n        </form>\r\n        <button className=\"addBtn\" onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;","import React from 'react';\r\nimport './Task.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTrash,\r\n  faCheckCircle,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nconst Task = (props) => {\r\n\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div className=\"toDo\">\r\n          <input className=\"checkBox\" type=\"checkbox\" checked={important ? true : false} />\r\n          <div className=\"mainDiv\"> {text} - do <span>{date} </span></div>\r\n          <button className=\"btnDone\" onClick={() => props.change(id)}><FontAwesomeIcon icon={faCheckCircle} size=\"2x\" color=\"white\" /></button>\r\n          <button className=\"btnDelete\" onClick={() => props.delete(id)}><FontAwesomeIcon icon={faTrash} size=\"2x\" color=\"white\" /></button>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString()\r\n    return (\r\n      <div>\r\n        <p className=\"doneTask\">\r\n            <strong>{text}</strong> (zrobić do {date}) <strong>Zrobione:</strong> {finish}\r\n          <button className=\"deleteBtn\" onClick={() => props.delete(id)}><FontAwesomeIcon icon={faTrash} size=\"2x\" /></button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport Task from './Task';\r\nimport './TaskList.css';\r\n\r\nconst TaskList = (props) => {\r\n\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n\r\n  // done.sort((a, b) => b.finishDate - a.finishDate)\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1\r\n      }\r\n      return 0\r\n    })\r\n  }\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n\r\n      a = a.text.toLowerCase();\r\n      b = b.text.toLowerCase();\r\n\r\n      if (a < b) return -1;\r\n      if (a > b) return 1;\r\n      return 0\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\n  // console.log(active, done);\r\n  const activeTasks = active.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n  const doneTasks = done.map(task => <Task key={task.id} task={task} delete={props.delete} change={props.change} />)\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n          <div className=\"toDoTaskList\">\r\n            <div className=\"important\">Priorytet</div>\r\n            <div className=\"mainDiv\">Zadanie</div>\r\n            <div className=\"done\">Zrobione</div>\r\n            <div className=\"delete\">Usuń</div>\r\n          </div>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań</p>}\r\n      </div>\r\n\r\n      <div className=\"done\">\r\n        <h3>Zadania zrobione <em>({done.length})</em></h3>\r\n        {doneTasks.slice(0, 5)}\r\n        {done.length > 5 && <span style={{ fontSize: 20 }}>Wyświetlono jedynie 5 ostatnich zadań</span>}\r\n\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TaskList;","import React, { Component } from 'react';\nimport AddTask from './AddTask';\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends Component {\n  counter = 9\n  state = {\n    tasks: [\n      \n    ]\n  }\n\n  deleteTask = (id) => {\n    console.log(\"delete elementu o id \" + id);\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n    // this.setState({\n    //   tasks\n    // })\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id)\n    this.setState({\n      tasks\n    })\n  }\n\n  changeTaskStatus = (id) => {\n    console.log(\"change w stanie elementu o id \" + id);\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime()\n      }\n    })\n    this.setState({\n      tasks\n    })\n  }\n\n  addTask = (text, date, important) => {\n    // console.log(\"dodany obiekt\");\n    const task = {\n      id: this.counter,\n      text, // tekst z inputa\n      date, //tekst z inputa\n      important, //wartość z inputa\n      active: true,\n      finishDate: null\n    }\n    this.counter++\n    console.log(task, this.counter);\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }))\n\n\n    return true\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTask add={this.addTask} />\n        <TaskList tasks={this.state.tasks} delete={this.deleteTask} change={this.changeTaskStatus} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}